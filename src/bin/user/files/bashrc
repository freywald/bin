# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
	*i*) ;;
	  *) return;;
esac

export FULL_TITLE=0
export HISTCONTROL="ignoreboth"
shopt -s histappend
export HISTFILESIZE=-1
export HISTSIZE=-1
export HISTTIMEFORMAT="[%d.%m.%Y %H:%M:%S]        "
mkdir --parents -- "$HOME/.local/var/bash/"
export HISTFILE="$HOME/.local/var/bash/history-${PWD//\//-}"
export HISTIGNORE='history;rm *:svn revert*:pm-hibernate:reboot*:sudo reboot*:shutdown*:sudo shutdown*'

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s "checkwinsize"

# make less more friendly for non-text input files, see lesspipe(1)
eval "$(SHELL=/bin/sh lesspipe)"

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

eval "$(dircolors -b $HOME/.dircolors)"

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f "$HOME/.bash_aliases" ]; then
	. "$HOME/.bash_aliases"
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
	. /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
	. /etc/bash_completion
  fi
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

if [ -d "$HOME/.config/composer/vendor/bin/" ] ; then
	PATH="$HOME/.config/composer/vendor/bin/:$PATH"
fi

if [ -d "$HOME/.cargo/" ] ; then
	. "$HOME/.cargo/env"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
	PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ] ; then
	PATH="$HOME/.local/bin:$PATH"
fi

export GPG_TTY="$( tty )"

# set variable identifying the chroot you work in (used in the prompt below)
if [[ -z "${debian_chroot:-}" ]] && [[ -r "/etc/debian_chroot" ]]; then
	debian_chroot="$(cat /etc/debian_chroot)"
fi

function set_prompt_command {
	local BLUE="\[\e[34m\]"
	local GREEN="\[\e[32m\]"
	local CYAN="\[\e[36m\]"
	local RED="\[\e[31m\]"
	local PURPLE="\[\e[35m\]"
	local BROWN="\[\e[33m\]"
	local YELLOW="\[\e[33m\]"
	local GRAY="\[\e[37m\]"
	local WHITE="\[\e[37m\]"
	local BLACK="\[\e[30m\]"

	local BOLD_BLUE="\[\e[1;34m\]"
	local BOLD_GREEN="\[\e[1;32m\]"
	local BOLD_CYAN="\[\e[1;36m\]"
	local BOLD_RED="\[\e[1;31m\]"
	local BOLD_PURPLE="\[\e[1;35m\]"
	local BOLD_BROWN="\[\e[1;33m\]"
	local BOLD_YELLOW="\[\e[1;33m\]"
	local BOLD_GRAY="\[\e[1;37m\]"
	local BOLD_WHITE="\[\e[1;37m\]"
	local BOLD_BLACK="\[\e[1;30m\]"

	local BACKGROUND_BLUE="\[\e[44m\]"
	local BACKGROUND_GREEN="\[\e[42m\]"
	local BACKGROUND_CYAN="\[\e[46m\]"
	local BACKGROUND_RED="\[\e[41m\]"
	local BACKGROUND_PURPLE="\[\e[45m\]"
	local BACKGROUND_BROWN="\[\e[33m\]"
	local BACKGROUND_YELLOW="\[\e[43m\]"
	local BACKGROUND_GRAY="\[\e[47m\]"
	local BACKGROUND_WHITE="\[\e[47m\]"
	local BACKGROUND_BLACK="\[\e[40m\]"

	local RESTORE="\[\e[0m\]" #0m restores to the terminal's default colour

	local chroot_name="$debian_chroot"
	if [[ ! -z "$debian_chroot" ]]; then
		chroot_name="${RESTORE} as ${BOLD_WHITE}$chroot_name"
	fi

	local sign
	if [[ "$USER" == "root" ]]; then
		sign="${RED}[!] #"
	else
		sign="${WHITE}\$"
	fi

	local local_user
	local_user=""
	if ! grep "^${USER}:" "/etc/passwd" > "/dev/null" 2>&1; then
		local_user=" ${BOLD_WHITE}ðŸ–§ "
	elif [[ $(loginctl show-session $XDG_SESSION_ID -P Remote) == "yes" ]]; then
		local_user=" ${BOLD_WHITE}ðŸ–§ "
	fi

	local path="$(realpath -s .)"
	local base_path="$(basename "$path")"

	local separator="${BOLD_GRAY} Â· ${RESTORE}"

	local git
	if which git &> "/dev/null"; then
		git=$(git branch 2> "/dev/null" | grep \* |  cut -d " " -f 2)
	fi
	if [[ ! -z "$git" ]]; then
		local head="$(git log -1 --oneline --pretty=format:'%H %ad %s %an%d' --date=format:'%d.%m.%Y %H:%M:%S' --color --)"
		git="${separator}${GRAY}${BLUE}${head}${separator}${GRAY}${BLUE}$(count_git_status_items)"
	fi

	local s1="${BLUE}~${USER}$local_user${RESTORE}${GRAY} at ${BLUE}${HOSTNAME}${chroot_name}${RESTORE}${git}${GRAY}"
	export PS1="${s1}${separator}${GRAY}Î”s ${BLUE}"'$(bash_get_stop_time ${__eX10DEAD_ROOTPID})'"${separator}at ${BLUE}$path${RESTORE} ${sign} ${RESTORE}"
}

function count_git_pattern() {
	echo "$(grep -P "$2" <<< $1 | wc -l)"
}

function count_git_status_items {
	local status=$(git status --porcelain=v1 2> "/dev/null")

	if [ $? -ne 128 ]; then
		local staged="$(count_git_pattern "$status" "^[A-Z]+ +.*$")"
		if [[ $staged -eq 0 ]]; then
			staged="${BLUE}#$staged${RESTORE}"
		else
			staged="${BOLD_WHITE}#$staged${RESTORE}"
		fi

		local unstaged="$(count_git_pattern "$status" "^ [A-Z]+.*$")"
		if [[ $unstaged -eq 0 ]]; then
			unstaged="${BLUE}#$unstaged${RESTORE}"
		else
			unstaged="${BOLD_WHITE}#$unstaged${RESTORE}"
		fi

		local untracked="$(count_git_pattern "$status" "^[?]{2} .*$")"
		if [[ $untracked -eq 0 ]]; then
			untracked="${BLUE}#$untracked${RESTORE}"
		else
			untracked="${BOLD_WHITE}#$untracked${RESTORE}"
		fi

		echo "$staged $unstaged $untracked"
	fi
}

function round_seconds() {
	# rounds a number to 3 decimal places
	echo "$1" | awk '{printf "%2.2f", $0}'
}

function bash_set_start_time() {
	# places the epoch time in ns into shared memory
	local start_time=$(date +'%s.%N' --)
	echo $start_time > "/dev/shm/${USER}.bashtime.${1}"
}

function bash_get_stop_time() {
	if [[ -f "/dev/shm/${USER}.bashtime.${1}" ]]; then
		# reads stored epoch time and subtracts from current
		local end_time=$(date +'%s.%N' --)
		local start_time=$(cat /dev/shm/${USER}.bashtime.${1})
		round_seconds $(echo $(eval echo "$end_time - $start_time") | bc)
	else
		echo 0
	fi
}

export __eX10DEAD_ROOTPID="$BASHPID"

function clear_shm_data() {
	rm -- "/dev/shm/${USER}.bashtime.${__eX10DEAD_ROOTPID}"
}

trap clear_shm_data EXIT

function set_current_command {
	local chroot_name="$debian_chroot"
	if [[ ! -z "$debian_chroot" ]]; then
		chroot_name="${RESTORE} as ${BLUE}$chroot_name"
	fi

	local sign
	if [[ "$USER" == "root" ]]; then
		sign="[!] "
	else
		sign=""
	fi

	local local_user
	local_user="local"
	if ! grep "^${USER}:" "/etc/passwd" > "/dev/null" 2>&1; then
		local_user="ðŸ–§"
	elif [[ $(loginctl show-session $XDG_SESSION_ID -P Remote) == "yes" ]]; then
		local_user="ðŸ–§"
	fi

	local path="$(realpath -s .)"
	local base_path="$(basename "$path")"

	echo "[${base_path^^}]"

	local history_line="$(history 1)"
	history_line="${history_line##*([[:space:])+([[:digit:]])+([[:space:]])}"
	echo " ${history_line//[\[\]]/}"
}

if [[ "$FULL_TITLE" -eq 1 ]]; then
	PS0='$(bash_set_start_time ${__eX10DEAD_ROOTPID});[\e]0;$(set_current_command)\a\]'
else
	PS0='$(bash_set_start_time ${__eX10DEAD_ROOTPID})'
fi

printf "\033]2;$(set_current_command)\a"
export PROMPT_COMMAND="history -a; set_prompt_command; . $HOME/.bashrc"

if [[ -z ${__eX10DEAD_ONCE_INITIALIZED+x} || "$__eX10DEAD_ONCE_INITIALIZED" != "$PWD" ]]; then
	if [[ -f "__INIT" ]]; then
		./__INIT
		__eX10DEAD_ONCE_INITIALIZED="$PWD"
	else
		__eX10DEAD_ONCE_INITIALIZED=""
	fi
fi
